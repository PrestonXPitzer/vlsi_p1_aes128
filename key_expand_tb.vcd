$date
	Tue Sep 16 13:56:01 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module key_expand_tb $end
$var wire 32 ! round_key [31:0] $end
$var wire 1 " done $end
$var reg 32 # cipher_key [31:0] $end
$var reg 1 $ clk $end
$var reg 2 % r_index [1:0] $end
$var reg 1 & reset $end
$var reg 4 ' round_key_num [3:0] $end
$var reg 1 ( start $end
$scope module uut $end
$var wire 32 ) cipher_key [31:0] $end
$var wire 1 $ clk $end
$var wire 1 " done $end
$var wire 2 * r_index [1:0] $end
$var wire 1 & reset $end
$var wire 32 + round_key [31:0] $end
$var wire 4 , round_key_num [3:0] $end
$var wire 1 ( start $end
$var reg 1 - done_reg $end
$var reg 1 . expanded $end
$var reg 128 / key_reg [127:0] $end
$var reg 2 0 load_count [1:0] $end
$var reg 1 1 loading $end
$var reg 32 2 round_key_reg [31:0] $end
$var integer 32 3 i [31:0] $end
$scope function rcon $end
$var reg 8 4 rc [7:0] $end
$var integer 32 5 i [31:0] $end
$upscope $end
$scope function rot_word $end
$var reg 32 6 w [31:0] $end
$upscope $end
$scope function sbox_lookup $end
$var reg 8 7 byte_in [7:0] $end
$upscope $end
$scope function sub_word $end
$var reg 32 8 w [31:0] $end
$upscope $end
$scope begin $unm_blk_10 $end
$var reg 32 9 temp [31:0] $end
$var reg 32 : w0 [31:0] $end
$var reg 32 ; w1 [31:0] $end
$var reg 32 < w2 [31:0] $end
$var reg 32 = w3 [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
b1011 3
b0 2
01
b0 0
b0 /
0.
0-
b0 ,
b0 +
b0 *
b0 )
0(
b0 '
1&
b0 %
0$
b0 #
0"
b0 !
$end
#5
b1011 3
1$
#10
0$
#15
b1011 3
1$
#20
0$
0&
#25
1"
1-
1.
b110110 4
b1010 5
b0 7
b0 8
b1010101011000110110001101100011 9
b0 6
b1010101011000110110001101100011 =
b1010101011000110110001101100011 <
b1010101011000110110001101100011 ;
b1010101011000110110001101100011 :
b1011 3
1$
#30
0$
b101011011111100001010100010110 #
b101011011111100001010100010110 )
1(
#35
0.
11
1$
#40
0$
0(
#45
0"
0-
b1 0
b101011011111100001010100010110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 /
1$
#50
0$
b101000101011101101001010100110 #
b101000101011101101001010100110 )
#55
b10 0
b101011011111100001010100010110001010001010111011010010101001100000000000000000000000000000000000000000000000000000000000000000 /
1$
#60
0$
b10101011111101110001010110001000 #
b10101011111101110001010110001000 )
#65
b11 0
b101011011111100001010100010110001010001010111011010010101001101010101111110111000101011000100000000000000000000000000000000000 /
1$
#70
0$
b1001110011110100111100111100 #
b1001110011110100111100111100 )
#75
b0 0
01
b101011011111100001010100010110001010001010111011010010101001101010101111110111000101011000100000001001110011110100111100111100 /
1$
#80
0$
#85
b101011011111100001010100010110 !
b101011011111100001010100010110 +
b101011011111100001010100010110 2
1"
1-
1.
b1111000 7
b1100011011000110110001101111000 8
b1111000011000110110001101100011 6
b110110 4
b1010 5
b11110010110001001100010000001010 9
b11110010110001001100010000001010 =
b10001010101001111010011101101001 <
b11110010110001001100010000001010 ;
b10001010101001111010011101101001 :
b1011 3
1$
#90
0$
#95
1$
#100
0$
#105
b1100010011000110110001101100011 !
b1100010011000110110001101100011 +
b1100010011000110110001101100011 2
1$
b1 %
b1 *
b1 '
b1 ,
#110
0$
#115
b11110010110001001100010000001010 !
b11110010110001001100010000001010 +
b11110010110001001100010000001010 2
1$
b11 %
b11 *
b1010 '
b1010 ,
#120
0$
#125
1$
